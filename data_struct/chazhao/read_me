大话数据结构-第八章 查找

1、顺序查找算法
  顺序查找适合于存储结构为顺序存储或链接存储的线性表；
 思想：顺序查找也称为线形查找，属于无序查找算法。从数据结构线形表的一端开始，顺序扫描，依次将扫描到的结点关键字与给定值k相比较，若相等则表示查找成功；若扫描结束仍没有找到关键字等于k的结点，表示查找失败
分析：　
　　查找成功时的平均查找长度为：（假设每个数据元素的概率相等） ASL = 1/n(1+2+3+…+n) = (n+1)/2 ;
　　当查找不成功时，需要n+1次比较，时间复杂度为O(n);
　　所以，顺序查找的时间复杂度为O(n)。
     空间复杂度：无
     
2、折半查找

也称折半查找，前提是查找的序列有序，顾名思义，就是查找中间元素，对比，满足条件返回，否则查找另外两个序列。

复杂度分析：最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)


3、插值查找
折半查找查找点每次是  mid=(low+high)/2=low+1/2*(high-low);
优化后的差之差找为 mid=low+(key-array[low])/(array[high]-array[low])*(high-low)
对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。
复杂度分析：查找成功或者失败的时间复杂度均为O(log2(log2n))

4、斐波那契数列查找
基本思想：也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。
复杂度分析：最坏情况下，时间复杂度为O(log2n)，且其期望复杂度也为O(log2n)
